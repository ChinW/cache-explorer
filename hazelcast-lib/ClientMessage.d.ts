/// <reference types="node" />
import { ClientConnection } from './network/ClientConnection';
export declare const RESPONSE_BACKUP_ACKS_OFFSET: number;
export declare const PARTITION_ID_OFFSET: number;
export declare const DEFAULT_FLAGS = 0;
export declare const SIZE_OF_FRAME_LENGTH_AND_FLAGS: number;
export declare class Frame {
    content: Buffer;
    flags: number;
    next: Frame;
    constructor(content: Buffer, flags?: number);
    static createInitialFrame(size: number, flags?: number): Frame;
    getLength(): number;
    copy(): Frame;
    deepCopy(): Frame;
    isBeginFrame(): boolean;
    isEndFrame(): boolean;
    isNullFrame(): boolean;
    hasEventFlag(): boolean;
    isFinalFrame(): boolean;
    hasUnfragmentedMessageFlag(): boolean;
    hasBeginFragmentFlag(): boolean;
    hasEndFragmentFlag(): boolean;
    private isFlagSet(flags, flagMask);
}
export declare const NULL_FRAME: Frame;
export declare const BEGIN_FRAME: Frame;
export declare const END_FRAME: Frame;
export declare class ClientMessage {
    startFrame: Frame;
    endFrame: Frame;
    private retryable;
    private connection;
    private _nextFrame;
    private constructor();
    static createForEncode(): ClientMessage;
    static createForDecode(startFrame: Frame, endFrame?: Frame): ClientMessage;
    getStartFrame(): Frame;
    nextFrame(): Frame;
    hasNextFrame(): boolean;
    peekNextFrame(): Frame;
    addFrame(frame: Frame): void;
    getMessageType(): number;
    setMessageType(messageType: number): void;
    getCorrelationId(): number;
    setCorrelationId(correlationId: any): void;
    getPartitionId(): number;
    setPartitionId(partitionId: number): void;
    getHeaderFlags(): number;
    isRetryable(): boolean;
    setRetryable(retryable: boolean): void;
    getConnection(): ClientConnection;
    setConnection(connection: ClientConnection): void;
    getTotalFrameLength(): number;
    getFragmentationId(): number;
    merge(fragment: ClientMessage): void;
    dropFragmentationFrame(): void;
    copyWithNewCorrelationId(): ClientMessage;
    toBuffer(): Buffer;
}
